#include "pch.h"
#include <iostream>
using namespace std;
#include "stdio.h";
#include <conio.h>;
#include <string.h>;
//DSQL mặt hàng
typedef struct tinhtrang
{
	int slbandau; //Số lượng ban đầu sau khi nhập
	int sl; //Số lượng hiện thời
}TT;
typedef struct mathang                //Lưu tên các mặt hàng có trong chuỗi cửa hàng và giá tiền
{
	char ten[100];
	int giatien;
	int mamh;    
	TT b;
}MH;
typedef struct monhang
{
	MH Info;
	monhang *next;
};
typedef struct MHlist
{
	monhang *head;
	monhang *tail;
};
typedef struct bill
{
	int mamh; //Mã mặt hàng đã mua
	int soluong; //Số lượng mua của mặt hàng đó
};
//Hàm tạo danh sách
void CreateList(MHlist &l);
//Hàm tạo 1 phần tử của danh sách
monhang *GetNode(MH a);
//Hàm phụ
void xoadau(MHlist &l);  
void xoacuoi(MHlist &l); 
void AddTail(MHlist &L, monhang *p);
void AddHead(MHlist &L, monhang *p);
void nhapbill(bill a[], int n);
void dieuchinhsoluong(bill a, MHlist &L);
//Hàm nhập, in thông tin của mỗi mặt hàng
void nhapmathang(MH &a);
void inmathang(MH a);
//Hàm nhập danh sách
void nhaplist(MHlist &l, int n);  
//Hàm đưa ra các lựa chọn việc cần làm trong danh sách
void Choices(MHlist &L, MH a[], int &n);
//Các lựa chọn công việc
void xuatlist(MHlist l); //Xuất danh sách
void xoatheomamh(MHlist &L, int x);  //Xóa mặt hàng theo mã
int timtheoma(MHlist &L, int n);  //Tìm kiếm mặt hàng theo mã
void sapxeptheogiatien(MHlist &L); // Sắp xếp mặt hàng theo giá từ thấp đến cao
void timslnhohon5(MHlist &L); //In ra các mặt hàng có số lượng <5 để nhập thêm
void Inbill(bill a[], int n1, MHlist l1, int n); // In hóa đơn tính tiền cho khách 
//n1 là số mặt hàng khách hàng mua, n là số mặt hàng trong l1 
void main()
{
	MH a[100];
	int n, n1;
	bill b[100];
	cout << "Nhap so mat hang can quan li: ";
	cin >> n;
	MHlist L;
	CreateList(L);
	nhaplist(L, n);
	cout << "Nhap so mat hang ban can mua: ";
	cin >> n1;
	nhapbill(b, n1);
	Inbill(b, n1, L, n);
	//Choices(L, a, n);
}
void nhapmathang(MH &a)
{
	cout << "Nhap ten mat hang: ";
	cin.ignore();
	cin.getline(a.ten, 9);
	cout << "Nhap gia tien: ";
	cin >> a.giatien;
	cout << "Nhap ma mat hang: ";
	cin >> a.mamh;
	cout << "Nhap so luong ban dau: ";
	cin >> a.b.slbandau;
	cout << "Nhap so luong hien con: ";
	cin >> a.b.sl;	
}
void inmathang(MH a)
{
	cout << endl;
	cout << "Ten mat hang: " << a.ten << endl;
	cout << "Ma so mat hang la: " << a.mamh << endl;
	cout << "Gia tien la: " << a.giatien << endl;
	cout << "So luong ban dau mat hang la: " << a.b.slbandau << endl;
	cout << "So luong hien con la: " << a.b.sl << endl;
	cout << endl;
}
void CreateList(MHlist &l)
{
	l.head = l.tail = NULL;
}
void AddHead(MHlist &L, monhang *p)
{
	if (L.head == NULL)
	{
		L.head = L.tail = p;
	}
	else
	{
		p->next = L.head;
		L.head = p;
	}
}
void AddTail(MHlist &L, monhang *p)
{
	if (L.head == NULL)
	{
		L.head = L.tail = p;
	}
	else
	{
		L.tail->next = p;
		L.tail = p;
	}
}
monhang *GetNode(MH a)
{
	monhang *p = new monhang;
	if (p == NULL)
	{
		return NULL;
	}
	p->Info = a;
	p->next = NULL;
	return p;
}
void nhaplist(MHlist &l, int n)
{
	MH a[100];
	monhang *p;
	for (int i = 1; i <= n; i++)
	{
		cout << "Nhap mat hang thu " << i << " :" << endl;
		nhapmathang(a[i]);
		p = GetNode(a[i]);
		AddTail(l, p);
		cout << endl;
	}
}
/*void Choices(MHlist &L, MH a[], int &n)
{
	cout << "Day la danh sach lien ket dung de quan li cac mat hang cua chuoi cua hang. Moi ban chon 1 trong cac cong viec ma ban muon thuc hien voi danh sach nay: " << endl;
	cout << "1. In danh sach mat hang vua nhap." << endl;
	cout << "2. Xoa mat hang theo ma mat hang." << endl;
	cout << "3. Tim kiem mat hang theo ma mat hang" << endl;
	cout << "4. Sap xep danh sach theo gia tien tu cao den thap" << endl;
	int n1;
	do {
		cout << "Ban chon cong viec so may: ";
		cin >> n1;
		switch (n1)
		{
		case 1:
		{
			xuatlist(L);
			cout << endl;
			break;
		}
		case 2:
		{
			int x;
			cout << "Nhap ma mat hang muon xoa: ";
			cin >> x;
			xoatheomamh(L, x, a, n);
			cout << endl;
			break;
		}
		case 3:
		{
			int x;
			cout << "Nhap ma mat hang muon tim: ";
			cin >> x;
			timtheoma(L, x);
			cout << endl;
			break;
		}
		case 4:
		{
			sapxeptheogiatien(L);
			xuatlist(L);
			break;
		}
		default:
			cout << "Gia tri khong hop le" << endl;
			break;
		}
		cout << "*****Nhan ESC de thoat.*****\n";
		cout << "-----nhan ENTER de tiep tuc chon lai.-----\n";

	} while (_getch() != 27);
}*/
void xuatlist(MHlist l)
{
	monhang *p;
	p = l.head;
	while (p != NULL)
	{
		inmathang(p->Info);
		p = p->next;
	}
	delete p;
}
void xoadau(MHlist &l)
{
	if (l.head == NULL) cout << "Danh sach rong";
	else
	{
		monhang *p = l.head;
		if (l.head == l.tail) l.head = l.tail = NULL;
		else l.head = l.head->next;
		delete p;
	}
	xuatlist(l);
}
void xoacuoi(MHlist &l)
{
	if (l.head == NULL) cout << "Danh sach rong";
	else
	{
		monhang *p = l.tail;
		if (l.head == l.tail) l.head = l.tail = NULL;
		else
		{
			monhang *q;
			for (q = l.head; q->next != l.tail; q = q->next)
			{
				q->next = NULL;
				l.tail = q;
			}
			delete p;
		}
		xuatlist(l);
	}
}
void XoaNode(MHlist &l, monhang *q)
{
	monhang *p = q->next;
	if (p == NULL) cout << "Khong xoa duoc!";
	else
	{
		q->next = p->next;
		if (p == l.tail) l.tail = q;
		delete p;
	}
}
void xoatheomamh(MHlist &L, int x)
{
	monhang *p = L.head;
	monhang *q = L.head;
	while (p != NULL)
	{
		if (p->Info.mamh == x)
		{
			if (p == L.head) xoadau(L);
			else if (p == L.tail) xoacuoi(L);
			else 
			{
				XoaNode(L, q);
				xuatlist(L);
			}
			break;
		}
		q = p;
		p = p->next;
	}
}
int timtheoma(MHlist &L, int n)
{
	monhang *p = L.head;
	while (p != NULL)
	{
		if (p->Info.mamh == n)
		{
			cin.ignore();
			inmathang(p->Info);
			return 1;
		}
		p = p->next;
	}
	return 0;
}
void sapxeptheogiatien(MHlist &l)
{
	MHlist l1, l2;
	monhang *tag, *p;
	if (l.head == l.tail) return;
	CreateList(l1);
	CreateList(l2);
	tag = l.head;
	l.head = l.head->next; 
	tag->next = NULL;
	while (l.head != NULL) 
	{
		p = l.head;
		l.head = l.head->next;
		p->next = NULL;
		if (p->Info.giatien <= tag->Info.giatien) AddHead(l1, p);
		else AddHead(l2, p);
	}
	sapxeptheogiatien(l1); 
	sapxeptheogiatien(l2);
	if (l1.head != NULL) 
	{ 
		l.head = l1.head;
		l1.tail->next = tag;
	} 
	else l.head = tag;
	tag->next = l2.head;
	if (l2.head != NULL) l.tail = l2.tail;
	else l.tail = tag;
}
void them(MHlist &L, MH a)
{
	nhapmathang(a);
	monhang *p = GetNode(a);
	AddTail(L, p);
}
void timslnhohon5(MHlist &L)
{
	monhang *p;
	p = L.head;
	while (p != NULL)
	{
		if (p->Info.b.sl < 5)
		{
			inmathang(p->Info);
			cout << "Ban muon nhap them bao nhieu: ";
			int t;
			cin >> t;
			p->Info.b.sl = p->Info.b.slbandau = p->Info.b.sl + t;
		}
		p = p->next;
	}
	delete p;
}
void nhapbill(bill a[], int n)
{
	for (int i = 1; i <= n; i++)
	{
		cout << "Nhap mat hang " << i << ": ";
		cout << "Nhap ma mat hang: ";
		cin >> a[i].mamh;
		cout << "Nhap so luong can mua: ";
		cin >> a[i].soluong;
		cout << endl;
	}
}
int giatien(MHlist L, int n)
{
	monhang *p = L.head;
	while (p != NULL)
	{
		if (p->Info.mamh == n)
		{
			return p->Info.giatien;
			break;
		}
		p = p->next;
	}
}
void dieuchinhsoluong(bill a, MHlist &L)
{
	monhang *p = L.head;
	while (p != NULL)
	{
		if (p->Info.mamh == a.mamh)
		{
			p->Info.b.sl = p->Info.b.sl - a.soluong;
			return;
		}
		p = p->next;
	}
}
void Inbill(bill a[], int n1, MHlist l1, int n) //n1 là số mặt hàng khách hàng mua, n là số mặt hàng trong l1
{
	int S = 0;
	for (int i = 1; i <= n1; i++)
	{
		dieuchinhsoluong(a[i], l1);
		int t = timtheoma(l1, a[i].mamh);
		if (t == 1)
		{
			cout << "So luong: " << a[i].soluong << endl;
			int t = giatien(l1, a[i].mamh);
			cout << "Thanh tien la: " << t * a[i].soluong;
			S += t * a[i].soluong;
			cout << endl;
		}
		else cout << "Khong tim duoc san pham co ma: " << a[i].mamh << endl;
	}
	cout << "Tong cong hoa don: " << S << endl;
}
